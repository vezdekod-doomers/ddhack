/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PutTicketDao,
    PutTicketDaoFromJSON,
    PutTicketDaoToJSON,
    TicketDao,
    TicketDaoFromJSON,
    TicketDaoToJSON,
    TicketListDao,
    TicketListDaoFromJSON,
    TicketListDaoToJSON,
} from '../models';

export interface CloseRequest {
    id: number;
    comment: string;
}

export interface GetRequest {
    count: number;
    page: number;
    from?: Date;
    to?: Date;
    statuses?: Array<GetStatusesEnum>;
    id?: string;
    phone?: string;
}

export interface GetByIdRequest {
    id: number;
}

export interface PutRequest {
    putTicketDao: PutTicketDao;
}

/**
 * 
 */
export class TicketControllerApi extends runtime.BaseAPI {

    /**
     */
    async closeRaw(requestParameters: CloseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling close.');
        }

        if (requestParameters.comment === null || requestParameters.comment === undefined) {
            throw new runtime.RequiredError('comment','Required parameter requestParameters.comment was null or undefined when calling close.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.comment !== undefined) {
            queryParameters['comment'] = requestParameters.comment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ticket/close`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async close(requestParameters: CloseRequest): Promise<void> {
        await this.closeRaw(requestParameters);
    }

    /**
     */
    async getRaw(requestParameters: GetRequest): Promise<runtime.ApiResponse<TicketListDao>> {
        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling get.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.phone !== undefined) {
            queryParameters['phone'] = requestParameters.phone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ticket`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketListDaoFromJSON(jsonValue));
    }

    /**
     */
    async get(requestParameters: GetRequest): Promise<TicketListDao> {
        const response = await this.getRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getByIdRaw(requestParameters: GetByIdRequest): Promise<runtime.ApiResponse<TicketDao>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ticket/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketDaoFromJSON(jsonValue));
    }

    /**
     */
    async getById(requestParameters: GetByIdRequest): Promise<TicketDao> {
        const response = await this.getByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async putRaw(requestParameters: PutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.putTicketDao === null || requestParameters.putTicketDao === undefined) {
            throw new runtime.RequiredError('putTicketDao','Required parameter requestParameters.putTicketDao was null or undefined when calling put.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ticket/add`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTicketDaoToJSON(requestParameters.putTicketDao),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async put(requestParameters: PutRequest): Promise<void> {
        await this.putRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetStatusesEnum {
    Open = 'OPEN',
    Closed = 'CLOSED'
}
