plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.alesharik'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.7'
//    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}


task buildFrontend(type: Exec) {
    workingDir project.projectDir.toString() + '/frontend/'
    commandLine 'yarn', 'build'
}

task createPublicFolder() {
    doLast {
        mkdir project.projectDir.toString() + '/frontend/build/release/public'
    }
}

task copyRelease(type: Copy, dependsOn: [buildFrontend, createPublicFolder]) {
    from project.projectDir.toString() + '/frontend/build'
    include '*.*'
    include '**/*.*'
    exclude project.projectDir.toString() + '/frontend/build/release/**/*.*'
    into project.projectDir.toString() + '/frontend/build/release/public'
}

//if (Files.exists(project.projectDir.toPath().resolve("frontend"))) {
//    processResources.dependsOn copyRelease
//}



sourceSets {
    main {
        resources {
            srcDir "./frontend/build/release"
        }
    }
}
